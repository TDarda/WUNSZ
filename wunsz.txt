#include<iomanip>
#include<windows.h>
#include<iostream>
#include<conio.h>
#include<deque>
#include<ctime>
#include<cstdlib>
#include<algorithm>
#include<map>
#include<functional>
#include<fstream>
#include<sstream>
#include<vector>

#define KEY_UP 72       //strzałka w górę
#define KEY_DOWN 80     //strzałka w dół
#define KEY_LEFT 75     //strzałka w lewo
#define KEY_RIGHT 77    //strzałka w prawo
#define ENTER 13		//enter
#define HEIGHT 15    //wysokość poziomu
#define WIDTH 30        //szerokość poziomu

using namespace std;

char Level[HEIGHT][WIDTH];

char choose, last_choose;

int appleX, appleY, score = 0;

int choose_count = 0, pace = 330, menu_pick=0;

bool _make_bigger, game_on = true;

fstream file;

deque<pair<int, int>>snake = {
		{7,4}, {7,5}, {7,6}, {7,7}
};

multimap<int, string>menu_items = {
		{1,"GRAJ"},{2,"TABLICA WYNIKÓW"},{3,"WYJDŹ"}
};

map<int, string>records;

void build_a_level() //budowa poziomu
{
	for (int i = 0; i < HEIGHT; i++)
	{
		for (int j = 0; j < WIDTH; j++)
		{
			Level[0][j] = '#';
			Level[i][0] = '#';
			Level[HEIGHT - 1][j] = '#';
			Level[i][WIDTH - 1] = '#';
		}
	}
}

void delete_a_level() //czyszczecnie poziomu
{
	for (int i = 0; i < HEIGHT; i++)
	{
		for (int j = 0; j < WIDTH; j++)
		{
			Level[i][j] = ' ';
		}
	}
}

void create_a_snake()  //stworzenie węża na planszy
{
	for (deque<pair<int, int>>::iterator iter = snake.begin(); iter != snake.end(); iter++)
	{
		Level[iter->first][iter->second] = 'o';
	}
}

void pace_game(int& _pace)   // zmienia tempo poruszania się węża
{
	if ((score + 1) % 5 == 0) { _pace -= 15; }
}

void show_a_level()   //wyświetlenie poziomu
{
	system("cls");
	for (int i = 0; i < HEIGHT; i++)
	{
		cout << endl;
		for (int j = 0; j < WIDTH; j++)
		{
			cout << Level[i][j];
		}
	}
}

void snake_reverse(deque<pair<int, int>>& _snake, int& _choose_count) // odwraca węża gdy gracz zaczyna od przycisku w prawo
{
	if (choose == KEY_UP || choose == KEY_DOWN || choose == KEY_RIGHT || choose == KEY_LEFT)
	{
		++_choose_count;
	}
	if (choose_count == 1 && choose == KEY_RIGHT)
	{
		reverse(_snake.begin(), _snake.end());
	}
}

void snake_manipulation(int& up_down, int& left_right, bool make_bigger)  //dodanie nowej głowy i usunięcię ogona, powiększenie węża
{
	if (left_right == WIDTH - 1)left_right = 1;
	if (left_right == 0)left_right = WIDTH - 2;
	if (up_down == 0)up_down = HEIGHT - 2;
	if (up_down == HEIGHT - 1)up_down = 1;

	if (!make_bigger)
	{
		snake.push_front(pair<int, int>(up_down, left_right));
		snake.pop_back();
	}
	else
	{
		snake.push_front(pair<int, int>(up_down, left_right));
	}
}

void apple_generator(int& appleX, int& appleY)  //generuje jabłko
{
	appleX = rand() % (WIDTH - 2) + 1;
	appleY = rand() % (HEIGHT - 2) + 1;
}

void apple_position(const int& appleX, const int& appleY)  //ustawia na planszy jabłko
{
	Level[appleY][appleX] = '@';
}

void apple_collision(bool& make_bigger)   //sprawdza czy była kolizja, jeśli tak to generuje nowe jabłko i wysyła sygnał aby powiększyć węża
{
	if (snake.front().first == appleY && snake.front().second == appleX)
	{
		apple_generator(appleX, appleY); score++; make_bigger = true; pace_game(pace);
	}
	else { make_bigger = false; }
}

void write_result() 
{
	string nick;
	cout <<"TWÓJ WYNIK TO: "<<score << " DAJ NICK: "; cin >> nick;
	file.open("rekordy.txt", ios::app);
	file << score << endl << nick << endl;
	cout << endl << "WYNIK ZAPISANY W TABELI REKORDÓW";
	file.close();
	Sleep(3000);
}

void read_result() 
{
	file.open("rekordy.txt", ios::in);
	vector<string>tmp;
	int i = 0;
	if(!file.good())
	{
		cout << "NIE MA JESZCZE ŻADNYCH REKORDÓW";
	}
	else 
	{
		while (!file.eof()) 
		{
			string line;
			getline(file, line);
			tmp.push_back(line);
		}
		for (int i = 0; i < tmp.size(); i++) 
		{
			int intiger = stoi(tmp[i]);
			string line = tmp[++i];
			records.insert({intiger, line});
		}
		for(multimap<int, string>::iterator iter=records.begin(); iter!=records.end();iter++)
		{
			cout << ++i << ". " << iter->second << " " << iter->first << endl;
		}

	}
	file.close();
	getchar();
}

void game_over()
{
	system("cls");
	cout << "GAME OVER"<<endl<<endl;
	write_result();
	exit(0);
}

void show_score()   // pokazuje wynik 
{
	cout << endl << "SCORE :" << score;
}

void body_collision(bool& _game_on) //kolizja z ciałem węża, sam siebie gryzie
{
	pair<int, int>temp(snake.front().first, snake.front().second);
	if (find(snake.begin() + 1, snake.end(), temp) != snake.end())
	{
		game_over();
	}
	else { _game_on = true; }
}

void game_sequence(char direct) // sekwencja gry, funkcja, która ma na celu zapobiec redundancji
{
	int snakeY = snake.front().first;
	int snakeX = snake.front().second;

	Sleep(pace);
	delete_a_level();

	if (direct == 'u')snake_manipulation(--snakeY, snakeX, _make_bigger);
	if (direct == 'd')snake_manipulation(++snakeY, snakeX, _make_bigger);
	if (direct == 'r')snake_manipulation(snakeY, ++snakeX, _make_bigger);
	if (direct == 'l')snake_manipulation(snakeY, --snakeX, _make_bigger);

	build_a_level();
	apple_position(appleX, appleY);
	create_a_snake();
	apple_collision(_make_bigger);
	body_collision(game_on);
	show_a_level();
	show_score();
}


char choosing(char& choose, char& last_choose)  // ta funkcja zapobiega zawracaniu na sobie węża
{
	choose = _getch();
	snake_reverse(snake, choose_count);
	switch (choose)
	{
	case KEY_UP:
		if (last_choose == KEY_DOWN) { choose = KEY_DOWN; }
		else
		{
			last_choose = KEY_UP;  return choose;
		}
		break;
	case KEY_DOWN:
		if (last_choose == KEY_UP) { choose = KEY_UP; }
		else
		{
			last_choose = KEY_DOWN; return choose;
		}
		break;
	case KEY_RIGHT:
		if (last_choose == KEY_LEFT) { choose = KEY_LEFT; }
		else
		{
			last_choose = KEY_RIGHT; return choose;
		}
		break;
	case KEY_LEFT:
		if (last_choose == KEY_RIGHT) { choose = KEY_RIGHT; }
		else
		{
			last_choose = KEY_LEFT; return choose;
		}
		break;
	}
	return choose;
}

void game()  //właściwa gra
{
	apple_generator(appleX, appleY);

	while (game_on)
	{
		switch (choosing(choose, last_choose))
		{
		case KEY_UP:
			while (!_kbhit())
			{
				game_sequence('u');
			}
			break;
		case KEY_DOWN:
			while (!_kbhit())
			{
				game_sequence('d');
			}
			break;
		case KEY_RIGHT:
			while (!_kbhit())
			{
				game_sequence('r');
			}
			break;
		case KEY_LEFT:
			while (!_kbhit())
			{
				game_sequence('l');
			}
			break;
		}
	}
}

int menu_choice(int &_menu_pick) //	wybór opcji z menu głównego
{
	char _menu_choice = _getch();
	if (_menu_choice == KEY_DOWN && _menu_pick<2)_menu_pick++;
	if (_menu_choice == KEY_UP && _menu_pick>0)_menu_pick--;
	if (_menu_choice == ENTER )return _menu_pick;
	if (_menu_choice == '1')return 0;
	if (_menu_choice == '2')return 1;
	if (_menu_choice == '3')return 2;
}

void mark(int mark) //podkreśla w menu na mark=240, i na normalnie mark=7
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), mark);
}

void show_menu_items()	//wyświetla menu w konsoli
{
	system("cls");
	for (map<int, string>::iterator it = menu_items.begin(); it != menu_items.end(); it++) 
	{
		if (it->first == menu_pick+1)mark(240);
		cout << "[" << it->first << "]"<<setw(20-(it->second.size())) << "  " << it->second << endl;
		mark(7);
	}
	cout << endl << menu_pick;
}

void menu() //menu główne
{
	while (true)
	{
		
		show_menu_items();
		switch (menu_choice(menu_pick))
		{
		case 0:
			system("cls");
			cout << "WCIŚNIJ STRZAŁKĘ, ŻEBY ZACZĄĆ!";
			game();
			break;

		case 1:
			system("cls");
			read_result();
			break;
		case 2:
			exit(0);
		}
	}
}

int main()
{

	setlocale(LC_CTYPE, "Polish");
	srand(time(NULL));
	menu();
	
}